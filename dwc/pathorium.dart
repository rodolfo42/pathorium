// Auto-generated from index.html.
// DO NOT EDIT.

library index_html;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'dart:html';
import 'dart:async';
import 'dart:json';
import 'package:web_ui/web_ui.dart';


// Original code


InputElement txtPath = query('#txtPath');
Element placeHolder = query('#entries .placeholder');
TableElement table = query("#entries table");
PathManager manager = new PathManager();

@Observable
String pathVar = '';

@Observable
String pathSeparator = ':';

@Observable
String sha1 = '';

void main() {
  txtPath
    ..onPaste.listen(
        (e) => varToTable(e.clipboardData.getData('Text'))
    )
    ..onInput.listen(
        (e) => varToTable(e.target.value)
    );
  
  table
    ..onInput.listen(
        tableToInput
    )
    ..onChange.listen(
        tableToInput
    );
  
  table.hidden = true;
  
  if (window.navigator.appVersion.indexOf("Win")!=-1 ) {
    pathSeparator = ";";
  }
  
  // get latest sha-1 commit
  var gitUrl = 'https://api.github.com/repos/rodolfo42/pathorium/commits/master';
  HttpRequest.getString(gitUrl).then((commit) {
    Map parsed = parse(commit);
    sha1 = parsed['sha'];
  });
}

void showError(String message) {
  DivElement div = query('.alert-box');
  div.text = message;
  div.style.display = 'block';
}

void varToTable(String value) {
  manager.setFromVar(value);
  updateTable();
}

void updateInput() {
  txtPath.value = manager.getVariable();
}

void updateTable() {
  var entries = manager.entries;
  table.hidden = entries.isEmpty;
  placeHolder.hidden = entries.isNotEmpty;
  
  var tbody = table.tBodies.first;
  tbody.children.clear();
  
  if(entries.isNotEmpty) {
    Iterator it = entries.iterator;
    while(it.moveNext()) {
      String entry = it.current;
      if( entry.isNotEmpty )
        addTableEntry(entry, tbody);
    }
  }
}

void addTableEntry(String entry, tbody) {
  TableRowElement newEntry = new Element.tag('tr');
  
  var cell = new Element.tag('td');
  var input = new TextInputElement();
  input.value = entry.trim();
  cell.nodes.add(input);
  newEntry.nodes.add(cell);
  
  tbody.nodes.add(newEntry);
}

void tableToInput(ev) {
  manager.clearEntries();
  table.queryAll('input').forEach( (e) {
    manager.addEntry(e.value);
  });
  updateInput();
}


// logic

class PathManager {

  List<String> entries = new List<String>(0);
  
  void setFromVar(String pathVariable) {
    this.entries = pathVariable.split(pathSeparator);
  }
  
  void removeEntry(int index) {
    entries.removeAt(index);
  }
  
  String getVariable() {
    if(entries == null) {
      return "";
    }
    
    return entries.join(pathSeparator);
  }
  
  void addEntry(String entry) => entries.add(entry);
  void clearEntries() => entries.clear();  
}
// Additional generated code
void init_autogenerated() {
  var __root = autogenerated.document.body;
  var __e0, __e1, __e3, __e4, __e6;
  var __t = new autogenerated.Template(__root);
  __e0 = __root.nodes[1].nodes[3].nodes[1].nodes[1].nodes[3].nodes[1].nodes[1].nodes[1];
  __t.listen(__e0.onChange, ($event) { pathSeparator = ';'; });
  __t.oneWayBind(() => pathSeparator == ';', (e) { if (__e0.checked != e) __e0.checked = e; }, false, false);
  __e1 = __root.nodes[1].nodes[3].nodes[1].nodes[1].nodes[3].nodes[1].nodes[1].nodes[5];
  __t.listen(__e1.onChange, ($event) { pathSeparator = ':'; });
  __t.oneWayBind(() => pathSeparator == ':', (e) { if (__e1.checked != e) __e1.checked = e; }, false, false);
  __e3 = __root.nodes[1].nodes[3].nodes[1].nodes[1].nodes[3].nodes[3].nodes[1];
  var __binding2 = __t.contentBind(() =>  pathSeparator == ';' ? 'Windows' : 'MAC/Linux' , false);
  __e3.nodes.addAll([new autogenerated.Text('\n                  '),
      __binding2,
      new autogenerated.Text('\n                ')]);
  __e4 = __root.nodes[1].nodes[3].nodes[3].nodes[1].nodes[3];
  __t.listen(__e4.onInput, ($event) { pathVar = __e4.value; });
  __t.oneWayBind(() => pathVar, (e) { if (__e4.value != e) __e4.value = e; }, false, false);
  __e6 = __root.nodes[1].nodes[5].nodes[3];
  var __binding5 = __t.contentBind(() => sha1, false);
  __e6.nodes.addAll([new autogenerated.Text('\n          '),
      __binding5,
      new autogenerated.Text('\n        ')]);
  __t.create();
  __t.insert();
}

//# sourceMappingURL=pathorium.dart.map